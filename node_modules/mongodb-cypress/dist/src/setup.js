"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.functions = void 0;
var mongodb_1 = require("mongodb");
var functions;
(function (functions) {
    functions[functions["mongoFindOne"] = 0] = "mongoFindOne";
    functions[functions["mongoFindMany"] = 1] = "mongoFindMany";
    functions[functions["mongoInsertOne"] = 2] = "mongoInsertOne";
    functions[functions["mongoInsertMany"] = 3] = "mongoInsertMany";
    functions[functions["mongoDeleteMany"] = 4] = "mongoDeleteMany";
    functions[functions["mongoDeleteOne"] = 5] = "mongoDeleteOne";
    functions[functions["mongoUpdateMany"] = 6] = "mongoUpdateMany";
    functions[functions["mongoUpdateOne"] = 7] = "mongoUpdateOne";
})(functions || (exports.functions = functions = {}));
module.exports = function (dbConfig) {
    return {
        mongoConnection: function (arg) { return __awaiter(void 0, void 0, void 0, function () {
            var mydb, c, db, _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        mydb = arg.db ? arg.db : dbConfig.db;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 30, , 31]);
                        return [4 /*yield*/, new mongodb_1.MongoClient(dbConfig.uri, dbConfig.options).connect()];
                    case 2:
                        c = _b.sent();
                        db = c.db(mydb).collection(arg.collection);
                        _a = arg.fun;
                        switch (_a) {
                            case functions.mongoFindMany: return [3 /*break*/, 3];
                            case functions.mongoFindOne: return [3 /*break*/, 7];
                            case functions.mongoInsertOne: return [3 /*break*/, 10];
                            case functions.mongoInsertMany: return [3 /*break*/, 15];
                            case functions.mongoDeleteMany: return [3 /*break*/, 20];
                            case functions.mongoDeleteOne: return [3 /*break*/, 22];
                            case functions.mongoUpdateMany: return [3 /*break*/, 24];
                            case functions.mongoUpdateOne: return [3 /*break*/, 26];
                        }
                        return [3 /*break*/, 28];
                    case 3:
                        if (!(arg.findParameters && arg.findParameters.filter)) return [3 /*break*/, 5];
                        return [4 /*yield*/, db
                                .find(arg.findParameters.filter, arg.findParameters.findOps)
                                .toArray()];
                    case 4: return [2 /*return*/, _b.sent()];
                    case 5: return [2 /*return*/, db.find().toArray()];
                    case 6: return [3 /*break*/, 29];
                    case 7:
                        if (!(arg.findParameters && arg.findParameters.filter)) return [3 /*break*/, 9];
                        return [4 /*yield*/, db.findOne(arg.findParameters.filter, arg.findParameters.findOps)];
                    case 8: return [2 /*return*/, _b.sent()];
                    case 9: return [3 /*break*/, 29];
                    case 10:
                        if (!(arg.insertParameters && arg.insertParameters.options)) return [3 /*break*/, 12];
                        return [4 /*yield*/, db.insertOne(arg.insertParameters.item, arg.insertParameters.options)];
                    case 11: return [2 /*return*/, _b.sent()];
                    case 12: return [4 /*yield*/, db.insertOne(arg.insertParameters.item)];
                    case 13: return [2 /*return*/, _b.sent()];
                    case 14: return [3 /*break*/, 29];
                    case 15:
                        if (!(arg.insertParameters && arg.insertParameters.options)) return [3 /*break*/, 17];
                        return [4 /*yield*/, db.insertMany(arg.insertParameters.item, arg.insertParameters.options)];
                    case 16: return [2 /*return*/, _b.sent()];
                    case 17: return [4 /*yield*/, db.insertMany(arg.insertParameters.item)];
                    case 18: return [2 /*return*/, _b.sent()];
                    case 19: return [3 /*break*/, 29];
                    case 20: return [4 /*yield*/, db.deleteMany(arg.deleteParameters.filter)];
                    case 21: return [2 /*return*/, _b.sent()];
                    case 22: return [4 /*yield*/, db.deleteOne(arg.deleteParameters.filter)];
                    case 23: return [2 /*return*/, _b.sent()];
                    case 24: return [4 /*yield*/, db.updateMany(arg.updateParameters.filter, arg.updateParameters.update)];
                    case 25: return [2 /*return*/, _b.sent()];
                    case 26: return [4 /*yield*/, db.updateOne(arg.updateParameters.filter, arg.updateParameters.update)];
                    case 27: return [2 /*return*/, _b.sent()];
                    case 28: throw "function ".concat(arg.fun, " not supported");
                    case 29: return [3 /*break*/, 31];
                    case 30:
                        e_1 = _b.sent();
                        throw e_1;
                    case 31: return [2 /*return*/];
                }
            });
        }); },
    };
};
